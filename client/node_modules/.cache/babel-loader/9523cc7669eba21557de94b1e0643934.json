{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { CHECK_USER_SESSION, EMAIL_SIGN_IN_START, GOOGLE_SIGN_IN_START, SIGN_OUT_START, SIGN_UP_START } from './userConstants';\nimport { signInSuccess, signInFail, signOutSuccess, signOutFail, signUpFail, signUpSuccess } from './userActions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n} // sign up with email\n\nexport function* signUpWithEmail({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = auth.createUserWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user, {\n      displayName\n    });\n    console.log(userRef); // const userSnapshot = yield userRef.get()\n    // yield put(signUpSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n  } catch (error) {\n    yield put(signUpFail(error));\n  }\n} // sign in with google\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n} // sign in with email\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFail(error));\n  }\n}\nexport function* onSignUpWithEmail() {\n  yield takeLatest(SIGN_UP_START, signUpWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onSignUpWithEmail), call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/blakevidebeck/CodeProjects/crwn-clothing/src/redux/user/userSagas.js"],"names":["takeLatest","put","all","call","CHECK_USER_SESSION","EMAIL_SIGN_IN_START","GOOGLE_SIGN_IN_START","SIGN_OUT_START","SIGN_UP_START","signInSuccess","signInFail","signOutSuccess","signOutFail","signUpFail","signUpSuccess","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signUpWithEmail","payload","displayName","email","password","user","createUserWithEmailAndPassword","console","log","signInWithGoogle","signInWithPopup","signInWithEmail","signInWithEmailAndPassword","isUserAuthenticated","signOut","onSignUpWithEmail","onGoogleSignInStart","onEmailSignInStart","onCheckUserSession","onSignOutStart","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport {\n\tCHECK_USER_SESSION,\n\tEMAIL_SIGN_IN_START,\n\tGOOGLE_SIGN_IN_START,\n\tSIGN_OUT_START,\n\tSIGN_UP_START,\n} from './userConstants'\n\nimport {\n\tsignInSuccess,\n\tsignInFail,\n\tsignOutSuccess,\n\tsignOutFail,\n\tsignUpFail,\n\tsignUpSuccess,\n} from './userActions'\n\nimport {\n\tauth,\n\tgoogleProvider,\n\tcreateUserProfileDocument,\n\tgetCurrentUser,\n} from '../../firebase/firebase.utils'\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n\ttry {\n\t\tconst userRef = yield call(createUserProfileDocument, userAuth)\n\t\tconst userSnapshot = yield userRef.get()\n\t\tyield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\n// sign up with email\nexport function* signUpWithEmail({\n\tpayload: { displayName, email, password },\n}) {\n\ttry {\n\t\tconst { user } = auth.createUserWithEmailAndPassword(email, password)\n\t\tconst userRef = yield call(createUserProfileDocument, user, { displayName })\n\t\tconsole.log(userRef)\n\n\t\t// const userSnapshot = yield userRef.get()\n\n\t\t// yield put(signUpSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n\t} catch (error) {\n\t\tyield put(signUpFail(error))\n\t}\n}\n\n// sign in with google\nexport function* signInWithGoogle() {\n\ttry {\n\t\tconst { user } = yield auth.signInWithPopup(googleProvider)\n\t\tyield getSnapshotFromUserAuth(user)\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\n// sign in with email\nexport function* signInWithEmail({ payload: { email, password } }) {\n\ttry {\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password)\n\t\tyield getSnapshotFromUserAuth(user)\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\nexport function* isUserAuthenticated() {\n\ttry {\n\t\tconst userAuth = yield getCurrentUser()\n\t\tif (!userAuth) return\n\t\tyield getSnapshotFromUserAuth(userAuth)\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\nexport function* signOut() {\n\ttry {\n\t\tyield auth.signOut()\n\t\tyield put(signOutSuccess())\n\t} catch (error) {\n\t\tyield put(signOutFail(error))\n\t}\n}\n\nexport function* onSignUpWithEmail() {\n\tyield takeLatest(SIGN_UP_START, signUpWithEmail)\n}\n\nexport function* onGoogleSignInStart() {\n\tyield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n\tyield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession() {\n\tyield takeLatest(CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onSignOutStart() {\n\tyield takeLatest(SIGN_OUT_START, signOut)\n}\n\nexport function* userSagas() {\n\tyield all([\n\t\tcall(onSignUpWithEmail),\n\t\tcall(onGoogleSignInStart),\n\t\tcall(onEmailSignInStart),\n\t\tcall(isUserAuthenticated),\n\t\tcall(onSignOutStart),\n\t])\n}\n"]},"metadata":{},"sourceType":"module"}
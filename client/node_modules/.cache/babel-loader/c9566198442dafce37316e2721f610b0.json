{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { CHECK_USER_SESSION, EMAIL_SIGN_IN_START, GOOGLE_SIGN_IN_START } from './userConstants';\nimport { signInSuccess, signInFail } from './userActions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n} // sign in with google\n\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n} // sign in with email\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFail(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["/Users/blakevidebeck/CodeProjects/crwn-clothing/src/redux/user/userSagas.js"],"names":["takeLatest","put","all","call","CHECK_USER_SESSION","EMAIL_SIGN_IN_START","GOOGLE_SIGN_IN_START","signInSuccess","signInFail","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","onEmailSignInStart","onCheckUserSession","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,SACCC,kBADD,EAECC,mBAFD,EAGCC,oBAHD,QAIO,iBAJP;AAMA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,eAA1C;AAEA,SACCC,IADD,EAECC,cAFD,EAGCC,yBAHD,EAICC,cAJD,QAKO,+BALP;AAOA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AAClD,MAAI;AACH,UAAMC,OAAO,GAAG,MAAMZ,IAAI,CAACQ,yBAAD,EAA4BG,QAA5B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CAACM,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACA,GAJD,CAIE,OAAOC,KAAP,EAAc;AACf,UAAMnB,GAAG,CAACO,UAAU,CAACY,KAAD,CAAX,CAAT;AACA;AACD,C,CAED;;AACA,OAAO,UAAUC,gBAAV,GAA6B;AACnC,MAAI;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,eAAL,CAAqBb,cAArB,CAAvB;AACA,UAAMG,uBAAuB,CAACS,IAAD,CAA7B;AACA,GAHD,CAGE,OAAOF,KAAP,EAAc;AACf,UAAMnB,GAAG,CAACO,UAAU,CAACY,KAAD,CAAX,CAAT;AACA;AACD,C,CAED;;AACA,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAClE,MAAI;AACH,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACmB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACA,GAHD,CAGE,OAAOF,KAAP,EAAc;AACf,UAAMnB,GAAG,CAACO,UAAU,CAACY,KAAD,CAAX,CAAT;AACA;AACD;AAED,OAAO,UAAUS,mBAAV,GAAgC;AACtC,MAAI;AACH,UAAMf,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAI,CAACE,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACA,GAJD,CAIE,OAAOM,KAAP,EAAc;AACf,UAAMnB,GAAG,CAACO,UAAU,CAACY,KAAD,CAAX,CAAT;AACA;AACD;AAED,OAAO,UAAUU,mBAAV,GAAgC;AACtC,QAAM9B,UAAU,CAACM,oBAAD,EAAuBe,gBAAvB,CAAhB;AACA;AAED,OAAO,UAAUU,kBAAV,GAA+B;AACrC,QAAM/B,UAAU,CAACK,mBAAD,EAAsBmB,eAAtB,CAAhB;AACA;AAED,OAAO,UAAUQ,kBAAV,GAA+B;AACrC,QAAMhC,UAAU,CAACI,kBAAD,EAAqByB,mBAArB,CAAhB;AACA;AAED,OAAO,UAAUI,SAAV,GAAsB;AAC5B,QAAM/B,GAAG,CAAC,CACTC,IAAI,CAAC2B,mBAAD,CADK,EAET3B,IAAI,CAAC4B,kBAAD,CAFK,EAGT5B,IAAI,CAAC0B,mBAAD,CAHK,CAAD,CAAT;AAKA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport {\n\tCHECK_USER_SESSION,\n\tEMAIL_SIGN_IN_START,\n\tGOOGLE_SIGN_IN_START,\n} from './userConstants'\n\nimport { signInSuccess, signInFail } from './userActions'\n\nimport {\n\tauth,\n\tgoogleProvider,\n\tcreateUserProfileDocument,\n\tgetCurrentUser,\n} from '../../firebase/firebase.utils'\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n\ttry {\n\t\tconst userRef = yield call(createUserProfileDocument, userAuth)\n\t\tconst userSnapshot = yield userRef.get()\n\t\tyield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\n// sign in with google\nexport function* signInWithGoogle() {\n\ttry {\n\t\tconst { user } = yield auth.signInWithPopup(googleProvider)\n\t\tyield getSnapshotFromUserAuth(user)\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\n// sign in with email\nexport function* signInWithEmail({ payload: { email, password } }) {\n\ttry {\n\t\tconst { user } = yield auth.signInWithEmailAndPassword(email, password)\n\t\tyield getSnapshotFromUserAuth(user)\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\nexport function* isUserAuthenticated() {\n\ttry {\n\t\tconst userAuth = yield getCurrentUser()\n\t\tif (!userAuth) return\n\t\tyield getSnapshotFromUserAuth(userAuth)\n\t} catch (error) {\n\t\tyield put(signInFail(error))\n\t}\n}\n\nexport function* onGoogleSignInStart() {\n\tyield takeLatest(GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart() {\n\tyield takeLatest(EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onCheckUserSession() {\n\tyield takeLatest(CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* userSagas() {\n\tyield all([\n\t\tcall(onGoogleSignInStart),\n\t\tcall(onEmailSignInStart),\n\t\tcall(isUserAuthenticated),\n\t])\n}\n"]},"metadata":{},"sourceType":"module"}
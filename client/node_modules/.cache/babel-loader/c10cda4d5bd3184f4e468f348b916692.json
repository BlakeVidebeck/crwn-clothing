{"ast":null,"code":"import firebase from 'firebase/app'; // import auth method from firebase\n\nimport 'firebase/auth'; // import storage method from firebase\n\nimport 'firebase/firestore';\nconst config = {\n  apiKey: 'AIzaSyCS5vtqAq-RppmYdXOJYrwzLa_ae-PuLbA',\n  authDomain: 'crwn-clothing-3dc79.firebaseapp.com',\n  projectId: 'crwn-clothing-3dc79',\n  storageBucket: 'crwn-clothing-3dc79.appspot.com',\n  messagingSenderId: '681155957711',\n  appId: '1:681155957711:web:b0e3965c069cd6928a78ba'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  // if userAuth does not exist then return out the function\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // google auth util\n\nconst provider = new firebase.auth.GoogleAuthProvider(); // always prompt with select account when connecting google\n\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/blakevidebeck/CodeProjects/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB,C,CAEA;;AACA,OAAO,eAAP,C,CACA;;AACA,OAAO,oBAAP;AAEA,MAAMC,MAAM,GAAG;AACdC,EAAAA,MAAM,EAAE,yCADM;AAEdC,EAAAA,UAAU,EAAE,qCAFE;AAGdC,EAAAA,SAAS,EAAE,qBAHG;AAIdC,EAAAA,aAAa,EAAE,iCAJD;AAKdC,EAAAA,iBAAiB,EAAE,cALL;AAMdC,EAAAA,KAAK,EAAE;AANO,CAAf;AASA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC5E;AACA,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AACrB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACH,YAAMV,OAAO,CAACW,GAAR,CAAY;AACjBJ,QAAAA,WADiB;AAEjBC,QAAAA,KAFiB;AAGjBC,QAAAA,SAHiB;AAIjB,WAAGV;AAJc,OAAZ,CAAN;AAMA,KAPD,CAOE,OAAOa,KAAP,EAAc;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACA;AACD;;AAED,SAAOf,OAAP;AACA,CAzBM;AA2BPX,QAAQ,CAAC2B,aAAT,CAAuB1B,MAAvB;AAEA,OAAO,MAAM2B,IAAI,GAAG5B,QAAQ,CAAC4B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB,C,CAEP;;AACA,MAAMiB,QAAQ,GAAG,IAAI7B,QAAQ,CAAC4B,IAAT,CAAcE,kBAAlB,EAAjB,C,CACA;;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe7B,QAAf","sourcesContent":["import firebase from 'firebase/app'\n\n// import auth method from firebase\nimport 'firebase/auth'\n// import storage method from firebase\nimport 'firebase/firestore'\n\nconst config = {\n\tapiKey: 'AIzaSyCS5vtqAq-RppmYdXOJYrwzLa_ae-PuLbA',\n\tauthDomain: 'crwn-clothing-3dc79.firebaseapp.com',\n\tprojectId: 'crwn-clothing-3dc79',\n\tstorageBucket: 'crwn-clothing-3dc79.appspot.com',\n\tmessagingSenderId: '681155957711',\n\tappId: '1:681155957711:web:b0e3965c069cd6928a78ba',\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\t// if userAuth does not exist then return out the function\n\tif (!userAuth) return\n\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`)\n\n\tconst snapShot = await userRef.get()\n\n\tif (!snapShot.exists) {\n\t\tconst { displayName, email } = userAuth\n\t\tconst createdAt = new Date()\n\n\t\ttry {\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData,\n\t\t\t})\n\t\t} catch (error) {\n\t\t\tconsole.log('error creating user', error.message)\n\t\t}\n\t}\n\n\treturn userRef\n}\n\nfirebase.initializeApp(config)\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\n// google auth util\nconst provider = new firebase.auth.GoogleAuthProvider()\n// always prompt with select account when connecting google\nprovider.setCustomParameters({ prompt: 'select_account' })\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}